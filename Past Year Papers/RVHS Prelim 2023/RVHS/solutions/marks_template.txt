Task 1 [18 + 5 + 3 + 4 + 4 + 5 = 39]
Task 1.1 
(/1) 7 classes
(/1) 7 classes with correct attributes
(/4) __str__ for four subclasses
(/4) Correct Constructors for WBA, CBA, Dog, Goose, Frog, Snake
(/2) Correct implementation of isYoung() for all 4 sub classes
(/2) Correct implementation of isFever() for Dog and Goose
(/4) Correct implementation of isSick() for Animal, Dog, Goose, Snake
Task 1.2
(/4) Name, Young/adult, Animal, well/sick, Ispoisonous (Any 4 correct)
(/1) output all instance using __str__()
Task 1.3 (3)
(/1) readfile successfully + return the list correctly
(/1) convert to float for age and length and int for the correct field
(/1) calling for the correct constructor and add into a list of Animal instances
Task 1.4 - display_statistic
(/3) Correctly get the numbers for all the 4 quandrants 
(/1) Display correctly in a table for the 4 animals
Task 1.5
(/4) find_fat_young_animal
Task 1.6
(/4) Filter out all the Cold Blood Animal and merge sort them according to their mass
(/1) Correct output
Task 2 [14 + 5 = 19]
Task 2.1 
__init__()
(/1) initialise self.nodes with the correct number of nodes
(/1) next_ptr of all the node instance in self.nodes correctly initialised
addNode(self, data)
(/1) Code to show unable to insert when full
(/1) Code to show next_free is updated to its second element when the first is used for adding a new node
(/1) Able to add new data as the head of the linked list when linked list is empty
(/1) Able to add new data as the head of the linked list when not empty
(/1) Able to add new data in the middle of the linked list
findCommonItems(self, sorted_linked_list)
(/3) Algorithm used to identify the common itemsn between self and sorted_linked_list
(/1) Code reflects understanding of self and sorted_linked_list
(/1) return a list with all the comomn items
display_content(self)
(/1) code to traverse the linkedlist from start to end
(/1) output in correct format
Task 2.2
(/1) code to add six elements
(/1) output the content of the linked list
Task 2.3
(/1) read the line in the file
(/1) split the content and return in a list
Task 2.4
(/1) output all the common items in the two linked lists using the class function findCommonItems()
Task 3 [5 + 3 + 2 + 2]
Task 3.1
(/1) - read file and return as list
(/1) - correct Mongoclient connection with correct database and collection name
(/1) - code to prevent key from being inserted into document when it does not exist
(/1) - document dictionary correctly filled with key and value
(/1) - insert_one
Task 3.2 - display_all_teacher_details
(/1) - mycol.find({})
(/1) - display '-' when field does not exist
(/1) - Correct output of all details
Task 3.3
(/2) - {"$or":[{"$and":[{"Contact":{"$exists": 0}},{"Role":{"$exists": 0}}]}, {"$and":[{"Department":"Maths"},{'Ratings': {'$lt': 3000}}]}]}
Task 3.4
(/1) - update_one Physics teacher to Computing teacher
(/1) - update successfully Marguerita Mciver to Computing
Task 4 [30]
Task 4.1 (7 marks)
[/1] - SQL for creating tables
[/1] - Primary keys
[/1] - Composite keys
[/1] - Foreign keys
[/2] - Checks for gender and AL
[/1] - DB operations (connect, execute, close)
Task 4.2 (6 marks)
[/2] - SQL for inserting for 3 tables
[/2] - DB operations (connect, execute, commit, close)
[/2] - file operation to read txt and iterations to insert 
Task 4.3 (2 marks)
[/1] - SQL for updating
[/1] - DB operations
Task 4.4 (7 marks)
[/3] - SQL for query (aggregate, join, group, order)
[/1] - Flask operations (route, view functions)
[/1] - view functions (db, template return)
[/1] - HTML and CSS (link, table)
[/1] - Jinja
Task 4.5 (8 marks)
[/3] - SQL for query (join, group, order, having)
[/2] - view functions and route (db, request, template return)
[/2] - HTML and CSS (form method)
[/1] - Jinja